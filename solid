[S] Single Responsibility Principle : a class should only have 1 responsibility, they should only have 1 reason to change

[O] Open Closed Principle

[L] Liskov Substitution Principle :

[I] Interface Segregation Principle : a client should not be forced to depent on interfaces they don't use.
      - break the intrface down into smaller pieces that clients can agree on that, make the interface more modular.
      
[D] Dependency Inversion Principle : high level modules should not depend on low leve modules but bow should depend on abstarcions 
                                       and those abstractions should not depend on deteails
      - resolve this with Interface, 
      "those abstractions" shouldn't have to know about how things get done, they should just say that these ar the things will get done
